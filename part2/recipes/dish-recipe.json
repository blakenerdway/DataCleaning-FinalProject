[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column description",
    "columnName": "description"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column first_appeared using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "first_appeared",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column menus_appeared using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "menus_appeared",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column times_appeared using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "times_appeared",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression grel:row.index + 1",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "grel:row.index + 1",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column last_appeared using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "last_appeared",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column lowest_price using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lowest_price",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column highest_price using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "highest_price",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column last_appeared using expression grel:if (value.slice(0,1).toNumber() > 1, (1+value.slice(1,4)).toNumber(),  value.toNumber())",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "last_appeared",
    "expression": "grel:if (value.slice(0,1).toNumber() > 1, (1+value.slice(1,4)).toNumber(),  value.toNumber())",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column first_appeared using expression grel:if(value.toNumber() < 2, cells['last_appeared'].value, value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "first_appeared",
    "expression": "grel:if(value.toNumber() < 2, cells['last_appeared'].value, value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column lowest_price using expression grel:0",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "lowest_price",
          "expression": "value",
          "columnName": "lowest_price",
          "invert": false,
          "selection": [],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": true,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "lowest_price",
    "expression": "grel:0",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column highest_price using expression grel:0",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "highest_price",
          "expression": "value",
          "columnName": "highest_price",
          "invert": false,
          "selection": [],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": true,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "highest_price",
    "expression": "grel:0",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column first_appeared using expression grel:if (value.slice(0,1).toNumber() > 1, (1+value.slice(1,4)).toNumber(), value.toNumber())",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "first_appeared",
    "expression": "grel:if (value.slice(0,1).toNumber() > 1, (1+value.slice(1,4)).toNumber(), value.toNumber())",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column first_appeared using expression grel:if (value.toNumber() > cells['last_appeared'].value.toNumber(), cells['last_appeared'].value.toNumber(), value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "first_appeared",
    "expression": "grel:if (value.toNumber() > cells['last_appeared'].value.toNumber(), cells['last_appeared'].value.toNumber(), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column lowest_price using expression grel:if (value.toNumber() > cells['highest_price'].value.toNumber(), cells['highest_price'].value.toNumber(), value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lowest_price",
    "expression": "grel:if (value.toNumber() > cells['highest_price'].value.toNumber(), cells['highest_price'].value.toNumber(), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]