[
  {
    "op": "core/column-removal",
    "description": "Remove column keywords",
    "columnName": "keywords"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column language",
    "columnName": "language"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column location_type",
    "columnName": "location_type"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.toLowercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.toLowercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.toLowercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.toLowercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "dinner",
          "[dinner]",
          "(dinner)",
          "dinner;",
          "dinner (?)",
          "dinner(?)",
          "[dinner?]",
          "(?dinner?)",
          "[?dinner?]",
          "[dinner ?]",
          "dinner,",
          "dinner?"
        ],
        "to": "dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "lunch",
          "[lunch]",
          "(?lunch?)",
          "[lunch?]",
          "lunch;",
          "(lunch)",
          "lunch (?)",
          "lunch."
        ],
        "to": "lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "breakfast",
          "[breakfast]",
          "breakfast;",
          "breakfast (?)",
          "[breakfast ?]",
          "breakfast(?)"
        ],
        "to": "breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily menu",
          "(daily menu)",
          "[daily menu?]",
          "[daily] menu",
          "daily menu;"
        ],
        "to": "daily menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "supper",
          "supper (?)",
          "supper(?)",
          "supper;"
        ],
        "to": "supper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "carte du jour",
          "(carte du jour)",
          "carte du jour;"
        ],
        "to": "carte du jour"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "lunch & dinner",
          "lunch; dinner",
          "[?dinner? - lunch?]"
        ],
        "to": "lunch & dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "fruhstuck-breakfast",
          "fruhstuck/breakfast",
          "fruhstuck/breakfast;"
        ],
        "to": "fruhstuck-breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily menu, dinner",
          "daily dinner menu",
          "daily menu; dinner"
        ],
        "to": "daily menu, dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "a la carte; dinner",
          "dinner a la carte",
          "dinner; a la carte"
        ],
        "to": "a la carte; dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily lunch menu",
          "daily menu, lunch",
          "daily menu; lunch"
        ],
        "to": "daily lunch menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "lunch or dinner",
          "dinner or lunch",
          "lunch &/or dinner"
        ],
        "to": "lunch or dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "luncheon",
          "[luncheon]",
          "luncheon;"
        ],
        "to": "luncheon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "anniversary dinner",
          "anniversary [dinner]",
          "anniversary dinner?"
        ],
        "to": "anniversary dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "mittagessen",
          "mittag-essen",
          "mittagessen;"
        ],
        "to": "mittagessen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "inspection trip - luncheon",
          "inspection trip, luncheon",
          "inspection trip, luncheon;"
        ],
        "to": "inspection trip - luncheon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "banquet and reception",
          "reception and banquet"
        ],
        "to": "banquet and reception"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "table d'hote dinner",
          "dinner table d'hote"
        ],
        "to": "table d'hote dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "afternoon tea",
          "afternoon tea ["
        ],
        "to": "afternoon tea"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "dinner - second cabin",
          "dinner second cabin"
        ],
        "to": "dinner - second cabin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "inspection trip, dinner",
          "inspection trip, dinner;"
        ],
        "to": "inspection trip, dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "mittagessen/dinner",
          "mittagessen[dinner]"
        ],
        "to": "mittagessen/dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "wine list",
          "wine list;"
        ],
        "to": "wine list"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "dinner,second cabin",
          "dinner-second cabin"
        ],
        "to": "dinner,second cabin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "reunion",
          "[?reunion?]"
        ],
        "to": "reunion"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "luncheon table d'hote",
          "table d'hote luncheon"
        ],
        "to": "luncheon table d'hote"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ladies night",
          "ladies' night"
        ],
        "to": "ladies night"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "breakfast and supper",
          "supper and breakfast"
        ],
        "to": "breakfast and supper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "wedding",
          "wedding(?)"
        ],
        "to": "wedding"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "reception",
          "[reception]"
        ],
        "to": "reception"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "washington's birthday banquet",
          "banquet (washington's birthday?)"
        ],
        "to": "washington's birthday banquet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "abend-essen",
          "abendessen"
        ],
        "to": "abend-essen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "menu",
          "menu;"
        ],
        "to": "menu"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "annual dinner",
          "[annual dinner?]"
        ],
        "to": "annual dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "breakfast (?) held by nordeutscher lloyd bremen at on board the ss george washington",
          "breakfast held by nordeutscher lloyd bremen at on board the ss george washington"
        ],
        "to": "breakfast held by nordeutscher lloyd bremen at on board the ss george washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "diner",
          "[diner]"
        ],
        "to": "diner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "dinner to above",
          "dinner to above;"
        ],
        "to": "dinner to above"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily lunch;",
          "daily lunch"
        ],
        "to": "daily lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "luncheon a la carte",
          "luncheon, a la carte"
        ],
        "to": "luncheon a la carte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "lincoln's birthday dinner",
          "dinner, lincolns birthday"
        ],
        "to": "lincoln's birthday dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "new year's dinner",
          "new years dinner"
        ],
        "to": "new year's dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "fifth annual dinner",
          "dinner, fifth annual"
        ],
        "to": "fifth annual dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "st. valentine's day dinner",
          "st. valentines day dinner"
        ],
        "to": "st. valentine's day dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "fruhstuck/lunch",
          "fruhstuck-lunch"
        ],
        "to": "fruhstuck/lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "new year's day dinner",
          "new years day dinner"
        ],
        "to": "new year's day dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "eighth annual banquet",
          "eighth annual banquet'"
        ],
        "to": "eighth annual banquet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily menu, breakfast",
          "daily breakfast menu"
        ],
        "to": "daily menu, breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily menu, luncheon",
          "daily luncheon menu"
        ],
        "to": "daily menu, luncheon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[private dinner?]",
          "private dinner"
        ],
        "to": "private dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "inspection trip, breakfast",
          "inspection trip - breakfast"
        ],
        "to": "inspection trip, breakfast"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "mittagessen - dinner",
          "mittagessen [dinner]"
        ],
        "to": "mittagessen - dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "lunch-dinner",
          "lunch;dinner"
        ],
        "to": "lunch-dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "middag/dinner",
          "middag-dinner"
        ],
        "to": "middag/dinner"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "daily bill of fare",
          "daily bill of fare;"
        ],
        "to": "daily bill of fare"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace('?', '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace('?', '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace('\\\"', '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace('\\\"', '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\[(.+)\\]/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\[(.+)\\]/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\((.+)\\)/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\((.+)\\)/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[dinner to secretaries of state}"
        ],
        "to": "dinner to secretaries of state"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line - Antwerpen - Ny",
          "Red Star Line - Antwerpen Ny",
          "Red Star Line - Antwerpen -ny",
          "Red Star Line -antwerpen Ny",
          "Red Star Line -antwerpen - Ny",
          "Red Star Line -antwerpen -ny",
          "Red Star Line- Antwerpen -ny",
          "Red Star Line- Antwerpen Ny"
        ],
        "to": "Red Star Line - Antwerpen - Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd - Bremen",
          "Norddeutscher Lloyd Bremen;",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd -bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "(fifth Avenue Hotel)",
          "(fifth Avenue Hotel?)",
          "Fifth Avenue Hotel (?)",
          "(fifth Avenue Hotel?}",
          "Fifth Avenue Hotel;"
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial",
          "(?colonial Hotel?)",
          "(colonial Hotel)"
        ],
        "to": "Colonial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[restaurant Name And/or Location Not Given]",
          "Restaurant Name And/or Location Not Given]",
          "Restaurant Name And/or Location Not Given",
          "[restaurant Name And/or Location Not Given"
        ],
        "to": "Name and/or Location Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd, Bremen",
          "Nordeutscher Lloyd - Bremen"
        ],
        "to": "Nordeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "(alta Vista Hotel)",
          "Alta Vista Hotel (?)"
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(engineers Club)",
          "Engineers Club",
          "Engineers' Club"
        ],
        "to": "Engineers' Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie",
          "Hamburg - Amerika Linie",
          "Hamburg- Amerika Linie"
        ],
        "to": "Hamburg Amerika Linie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker (?)",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria",
          "(waldorf-astoria?)",
          "(waldorf-astoria)"
        ],
        "to": "Waldorf-Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "(majestic Hotel)",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line",
          "(red Star Line)",
          "Red Star Line -"
        ],
        "to": "Red Star Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "Usms",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York",
          "U.S.M.S New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchants' Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchants' Club",
          "Merchant's Club",
          "Merchants Club"
        ],
        "to": "The Merchants' Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St, Denis Hotel"
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editors' Association",
          "American Medical Editor's Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editors' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kobe Maru",
          "Nippon Yusen Kaisha -s.S.Kobe Maru"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. American Shipper",
          "S.S. \"american Shipper\"\"\""
        ],
        "to": "S.S. American Shipper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kasuga",
          "Nippon Yusen Kaisha -s.S.Kasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company - Sonoma",
          "Oceanic Steamship Company _ Sonoma"
        ],
        "to": "Oceanic Steamship Company - Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club Of Chicago",
          "The Merchants Club Of Chicago"
        ],
        "to": "The Merchant's Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wabash Railway Company",
          "Wabash [railway Company]"
        ],
        "to": "Wabash Railway Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St. Patrick",
          "Friendly Sons Of St Patrick"
        ],
        "to": "Friendly Sons of St. Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "Cie. Gle. Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "De L'ange Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Frederik Viii",
          "(king Frederik Viii)"
        ],
        "to": "King Frederik Viii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient And Honorable Artillery Co Of Massachusetts",
          "Ancient And Honorable Artillery Co. Of Massachusetts"
        ],
        "to": "Ancient and Honorable Artillery Co Of Massachusetts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "The New Willard Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - Sierra",
          "Oceanic Steamship Co.- Sierra"
        ],
        "to": "Oceanic Steamship Co. - Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Francis Hotel",
          "Hotel St. Francis"
        ],
        "to": "St. Francis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In The State Of New York",
          "Society Of The Society Of Colonial Wars In The State Of New York"
        ],
        "to": "Society of Colonial Wars In The State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Alexander Of Servia)",
          "King Alexander Of Servia"
        ],
        "to": "King Alexander of Servia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Association Of New York City",
          "(hotel Association Of New York City)"
        ],
        "to": "Hotel Association of New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs' Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - S.S.Zealandia",
          "Oceanic Steamship Co. S.S.Zealandia"
        ],
        "to": "Oceanic Steamship Co. - S.S.Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(club)",
          "? Club"
        ],
        "to": "Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot Liberte",
          "Paquebot \\liberte\\\"\""
        ],
        "to": "Paquebot Liberte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Algazar",
          "Algazar Hotel"
        ],
        "to": "Hotel Algazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Fairmont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alcazar Hotel",
          "Hotel Alcazar"
        ],
        "to": "Alcazar Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Nicholas Hotel",
          "Hotel St. Nicholas"
        ],
        "to": "St. Nicholas Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Cosmopolitan Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colombo Hotel",
          "Hotel Colombo"
        ],
        "to": "Colombo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(maharaja Of Baroda)",
          "Maharaja Of Baroda"
        ],
        "to": "Maharaja of Baroda"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company -s.S.Zealander",
          "Oceanic Steamship Company - S.S.Zealander"
        ],
        "to": "Oceanic Steamship Company -s.S.Zealander"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirate's House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of The Sons Of The American Revolution",
          "Michigan Society Sons Of The American Revolution"
        ],
        "to": "Michigan Society of The Sons of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchant's Club of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriff's Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line - S.S.Westernland",
          "Red Star Line S.S.Westernland"
        ],
        "to": "Red Star Line - S.S.Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tavern On The Green",
          "The Tavern On The Green"
        ],
        "to": "Tavern On The Green"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Minot",
          "Minot Hotel"
        ],
        "to": "Hotel Minot"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[restaurant And/or Location Not Given.]",
          "[restaurant And/or Location Not Given]"
        ],
        "to": "Name and/or Location Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S New Amsterdam",
          "S.S. New Amsterdam"
        ],
        "to": "S.S New Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherry's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Ambassador Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Bristol Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalder's Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(private)",
          "Private"
        ],
        "to": "(private)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Commodore Hotel",
          "The Hotel Commodore"
        ],
        "to": "The Commodore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Algonquin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willard's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Ballroom Of The Hotel Plaza",
          "The Grand Ballroom Of The Hotel Plaza"
        ],
        "to": "Grand Ballroom of the Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co. - S.S.Athabasca",
          "Canadian Pacific Railway Co.- S.S.Athabasca"
        ],
        "to": "Canadian Pacific Railway Co. - S.S.Athabasca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Century Club",
          "(century Club?)"
        ],
        "to": "Century Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(emperor Nicholas Ii",
          "Emperor Nicholas Ii"
        ],
        "to": "Emperor Nicholas Ii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Continental Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System",
          "[new York Central System]"
        ],
        "to": "New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Northern Steamship Company/great Northern Ry Line.",
          "(northern Steamship Company/great Northern Ry Line.)"
        ],
        "to": "Northern Steamship Company/great Northern Ry Line."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Society - Sons Of The American Revolution",
          "Wisconsin Society Sons Of The American Revolution"
        ],
        "to": "Wisconsin Society - Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "(king Edward Vii)"
        ],
        "to": "King Edward Vii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Regis Hotel",
          "Hotel St. Regis"
        ],
        "to": "St. Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Regis Hotel",
          "Hotel St.Regis"
        ],
        "to": "St.Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel",
          "St Charles Hotel"
        ],
        "to": "St. Charles Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of The Revolution In The State Of Missouri",
          "Society Sons Of The Revolution In The State Of Missouri"
        ],
        "to": "Society of Sons of the Revolution In The State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf- Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Empire",
          "Empire Hotel"
        ],
        "to": "Hotel Empire"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reuben's",
          "Reuben's."
        ],
        "to": "Reuben's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\france\\\"\"",
          "Paquebot France"
        ],
        "to": "Paquebot France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Royal Palm Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(english Hotel Restaurant)",
          "English Hotel Restaurant"
        ],
        "to": "English Hotel Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "George Washington Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.(?)",
          "Rg"
        ],
        "to": "R.G."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Club",
          "(manhattan Club)"
        ],
        "to": "Manhattan Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Columbia Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Oceanic",
          "Rms Oceanic"
        ],
        "to": "R.M.S. Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Grand Hotel",
          "Grand New Hotel"
        ],
        "to": "New Grand Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hotel Plaza",
          "The Plaza Hotel"
        ],
        "to": "The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "Xiii Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of The American Revolution",
          "Empire State Society Sons Of The American Revolution"
        ],
        "to": "Empire State Society Of Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Parthia",
          "R.M.S. \"parthia\"\"\""
        ],
        "to": "R.M.S. Parthia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mouquin Restaurant And Wine Co",
          "Mouquin Restaurant And Wine Co."
        ],
        "to": "Mouquin Restaurant And Wine Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial (?)"
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Minnetonka",
          "S.S. \"minnetonka\"\"\""
        ],
        "to": "S.S. Minnetonka"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Commodore",
          "Commodore Hotel"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "U.S.M.S. St. Louis"
        ],
        "to": "Usms St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyer's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(238 Eight Avenue)",
          "238 Eight Avenue"
        ],
        "to": "(238 Eight Avenue)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard Club",
          "(harvard Club)"
        ],
        "to": "Harvard Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnell's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel D'angleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "(union Club)"
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"queen Mary\"\"\"",
          "R.M.S. \\queen Mary\\\"\""
        ],
        "to": "R.M.S. \"queen Mary\"\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Legation",
          "(american Legation)"
        ],
        "to": "American Legation"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Claremont",
          "Claremont Hotel"
        ],
        "to": "Hotel Claremont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \\mauretania\\\"\"",
          "R.M.S. Mauretania"
        ],
        "to": "R.M.S. Mauretania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-life Building",
          "Metlife Building"
        ],
        "to": "Met-life Building"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"frederik Viii\"",
          "S.S. Frederik Viii"
        ],
        "to": "S.S. Frederik Viii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, The Plaza",
          "The Plaza Ballroom"
        ],
        "to": "Ballroom, The Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzie's Hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Umberto)",
          "King Umberto"
        ],
        "to": "Kng Umberto"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Haakon Vii",
          "(king Haakon Vii)"
        ],
        "to": "King Haakon Vii"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company - Sierra",
          "Oceanic Steamship Company -sierra"
        ],
        "to": "Oceanic Steamship Company - Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"ile De France\"\"\"",
          "S.S. Ile De France"
        ],
        "to": "S.S. Ile De France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers Association",
          "Master Printers' Association"
        ],
        "to": "Master Printers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota",
          "Military Order Of The Loyal Legion Of The United States. Commandery Of The State Of Minnesota"
        ],
        "to": "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams' Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Society In The City Of New York",
          "The New England Society In The City Of New York"
        ],
        "to": "New England Society In The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Grenoble Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\\the Manor\\\"\"",
          "The Manor"
        ],
        "to": "The Manor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn. Rr - Pullman Dining Car Service",
          "Penn Rr - Pullman Dining Car Service"
        ],
        "to": "Penn. Rr - Pullman Dining Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(harvard University)",
          "Harvard University"
        ],
        "to": "Harvard University"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alpha Kappa Kappa",
          "Kappa Alpha"
        ],
        "to": "Alpha Kappa Kappa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Windsor Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toyo Kisen Kaisha - Hong Kong Maru",
          "Toyo Kisen Kaisha -hong Kong Maru"
        ],
        "to": "Toyo Kisen Kaisha - Hong Kong Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(fifth Ave. Hotel)",
          "Fifth Ave. Hotel"
        ],
        "to": "Fifth Ave. Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "New York Central System, Boston & Albany Railroad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Copley Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Guard Albany Zouave Cadets",
          "Albany Zouave Cadets - Old Guard"
        ],
        "to": "Old Guard Albany Zouave Cadets"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central & Hudson River R.R.",
          "New York Central & Hudson River R.R.."
        ],
        "to": "New York Central & Hudson River R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. George's Society",
          "St. Georges Society"
        ],
        "to": "St. George's Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "San Remo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanley's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bankers' Club Of Chicago",
          "Bankers Club Of Chicago"
        ],
        "to": "Bankers' Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial Hotel",
          "Hotel Imperial"
        ],
        "to": "Imperial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces' Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Nasuga",
          "Nippon Yusen Kaisha -s.S.Nasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Nasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(king Christian Ix Of Denmark)",
          "King Christian Ix Of Denmark"
        ],
        "to": "King Christian Ix Of Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeteria - Lunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George",
          "St. George Hotel"
        ],
        "to": "Hotel St. George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co. - Sonoma",
          "Oceanic Steamship Co. _ Sonoma"
        ],
        "to": "Oceanic Steamship Co. - Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Associated Pioneers Of The Territorial Days Of California",
          "The Associated Pioneers Of The Territorial Days Of California"
        ],
        "to": "Associated Pioneers Of The Territorial Days Of California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "York Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Us Army - Subsistence Dept.",
          "U.S. Army - Subsistence Dept."
        ],
        "to": "Us Army - Subsistence Dept."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "Hotel New Weston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-plaza Hotel",
          "Hotel Copley-plaza"
        ],
        "to": "Copley-plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S.Kinshin Maru",
          "Nippon Yusen Kaisha -s.S.Kinshin Maru"
        ],
        "to": "Nippon Yusen Kaisha - S.S.Kinshin Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ponce De Leon Hotel",
          "Hotel Ponce De Leon"
        ],
        "to": "Ponce De Leon Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(american Line)",
          "American Line"
        ],
        "to": "(american Line)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Revelstoke",
          "Revelstoke Hotel"
        ],
        "to": "Hotel Revelstoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha - S.S. Kasuga",
          "Nippon Yusen Kaisha -ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha - S.S. Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Roanoke",
          "Roanoke Hotel"
        ],
        "to": "Hotel Roanoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club",
          "(union League Club)"
        ],
        "to": "Union League Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Des Indes Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore"
        ],
        "to": "Baltimore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Westminster Hotel",
          "Hotel Westminster"
        ],
        "to": "Westminster Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Profile House And Hotel Vendome",
          "Hotel Vendome And Profile House"
        ],
        "to": "Profile House And Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York (?)"
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Gallatin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporter's Association",
          "New England Shorthand Reporters' Association"
        ],
        "to": "New England Shorthand Reporter's Association"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace('\\\"','')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace('\\\"','')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/\\[(.+)\\]/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/\\[(.+)\\]/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/\\((.+)\\)/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/\\((.+)\\)/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/\\\\(.+)\\\\/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/\\\\(.+)\\\\/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace('?', '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace('?', '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace('\\\"', '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace('\\\"', '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/(,(?=\\S))/, ', ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/(,(?=\\S))/, ', ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/\\[(.+)\\]/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/\\[(.+)\\]/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/\\((.+)\\)/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/\\((.+)\\)/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace('?', '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace('?', '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/^(.+);/, '$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/^(.+);/, '$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's, New York, Ny",
          "Delmonico's, new York, N.Y.",
          "Delmonico's, new York, Ny",
          "Delmonico's, new York, ny",
          "Delmonicos, new York, N.Y.",
          "Delmonico's New York, ny",
          "Delmonico's, new York, n.Y.",
          "Delmonico's. New York, Ny",
          "Delmonicos, New York, Ny",
          "Delmonicos, new York, Ny",
          "delmonico's, New York, Ny",
          "delmonico's, new York Ny"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's Ny",
          "Delmonico's ny",
          "Delmonico's, ny",
          "Delmonico's, Ny",
          "Delmonicos, ny",
          "Delmonico's, N.Y.",
          "Delmonicos Ny",
          "Delmonicos', Ny"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago, Il",
          "Chicago, il",
          "chicago, Il",
          "Chicago Il",
          "Chicago il",
          "Chicago, il.",
          "chicago Il",
          "chicago, il"
        ],
        "to": "Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Philadelphia, Pa",
          "Philadelphia pa",
          "Philadelphia, pa",
          "Philadelphia, pa.",
          "philadelphia, Pa",
          "Philadelphia, Pa.",
          "Philadelphia. Pa",
          "philadelphia, pa."
        ],
        "to": "Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Auditorium Hotel chicago, Il",
          "Auditorium Hotel, chicago, Il",
          "Auditorium Hotel, Chicago, Il",
          "Auditorium Hotel , Chicago, Il",
          "Auditorium Hotel chicago Il",
          "Auditorium Hotel, Chicago il",
          "Auditorium Hotel, Chicago, il"
        ],
        "to": "Auditorium Hotel , Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route friedrich Der Grosse",
          "En Route - friedrich Der Grosse",
          "En Route  Friedrich Der Grosse",
          "En Route 'friedrich Der Grosse",
          "En Route - 'friedrich Der Grosse ",
          "En Route - :friedrich Der Grosse",
          "En Route friedrich Der Grosse "
        ],
        "to": "En Route friedrich Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Providence, Ri",
          "Providence, R.I.",
          "Providence Ri",
          "Providence, ri",
          "providence Ri",
          "providence, R.I.",
          "providence, Ri"
        ],
        "to": "Providence, Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York, Ny",
          "New York, ny",
          "new York, Ny",
          "new York, ny",
          "New York ny",
          "New York, Ny "
        ],
        "to": "New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Point Comfort, Va",
          "Old Point Comfort, va",
          "Old Point Comfort Va",
          "Old Point Comfort, Va.",
          "Old Point, Comfort, Va",
          "old Point Comfort, Va"
        ],
        "to": "Old Point Comfort, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Washington, Dc",
          "Washington, d.C.",
          "Washington, D.C.",
          "Washington, dc",
          "Washington Dc",
          "washington, dc"
        ],
        "to": "Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan, ny",
          "Hotel Manhattan, Ny",
          "Hotel Manhattan ny",
          "Manhattan Hotel, ny",
          "Manhattan Hotel Ny",
          "Manhattan Hotel, Ny"
        ],
        "to": "Hotel Manhattan, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago, ill.",
          "Chicago, ill",
          "chicago, Ill",
          "Chicago , ill",
          "Chicago, Ill",
          "chicago, ill"
        ],
        "to": "Chicago, ill."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rome, Italy",
          "Rome italy",
          "Rome, italy",
          "rome, italy",
          "Rome Italy",
          "rome, Italy"
        ],
        "to": "Rome, Italy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's new York",
          "Delmonico's, new York",
          "Delmonicos, new York",
          "Delmonico's,  New York",
          "Delmonico's, New York",
          "Delmonicos, New York"
        ],
        "to": "Delmonico's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Long Beach, L.I, Ny",
          "Long Beach, Li, ny",
          "Long Beach, L.I., Ny",
          "Long Beach, l.I., ny",
          "Long Beach, l.I., ny&",
          "Long Beach, li, ny"
        ],
        "to": "Long Beach, L.I, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Auditorium chicago, Il",
          "The Auditorium, Chicago, Il",
          "Auditorium, The, Chicago, Il",
          "Auditorium, the, chicago, il",
          "The Auditorium Chicago Il",
          "The Auditorium, chicago, Il"
        ],
        "to": "The Auditorium chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard, Washington, Dc",
          "New Willard, The, Washington, Dc",
          "The New Willard [washington, Dc",
          "The New Willard, Washington Dc",
          "The New Willard, Washington, D.C."
        ],
        "to": "The New Willard, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Brunswick Ny",
          "Hotel Brunswick, ny",
          "Brunswick Hotel ny",
          "Hotel Brunswick ny",
          "Hotel Brunswick, Ny"
        ],
        "to": "Hotel Brunswick Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route - Ss lahn",
          "En Route - ss Lahn",
          "En Route -ss lahn",
          "En Route _ Ss lahn",
          "En Route ss Lahn"
        ],
        "to": "En Route - Ss lahn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Buffalo, Ny",
          "Buffalo, ny",
          "buffalo, Ny",
          "Buffalo Ny",
          "[buffalo, Ny"
        ],
        "to": "Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Francisco, Ca",
          "San Francisco, ca",
          "san Francisco, ca",
          "san Francisco, Ca",
          "San Francisco, ca."
        ],
        "to": "San Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Friesland",
          "S.S. Friesland",
          "Ss. Friesland",
          "S.S. friesland",
          "Ss friesland"
        ],
        "to": "Ss Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brooklyn, Ny",
          "Brooklyn, ny",
          "brooklyn, Ny",
          "Brooklyn Ny",
          "brooklyn, ny"
        ],
        "to": "Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, N.P. Bahamas",
          "Nassau, np, bahamas",
          "Nassau, N.P., Bahamas",
          "nassau, N.P., Bahamas",
          "nassau, n.P., bahamas"
        ],
        "to": "Nassau, N.P. Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy New York",
          "Hotel Savoy new York",
          "Hotel Savoy, New York",
          "Hotel Savoy, new York"
        ],
        "to": "Hotel Savoy New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's ny",
          "Sherry's Ny",
          "Sherry's, Ny",
          "Sherrys, Ny"
        ],
        "to": "Sherry's ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Pier R.I.",
          "Narragansett Pier, Ri",
          "Narragansett Pier, r.I.",
          "Narragansett Pier, ri"
        ],
        "to": "Narragansett Pier R.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue-stratford Hotel, Philadelphia, Pa",
          "Hotel Bellevue-stratford philadelphia, Pa",
          "Hotel Bellevue-stratford, Philadelphia, Pa",
          "Hotel Bellevue-stratford, philadelphia, Pa"
        ],
        "to": "Bellevue-stratford Hotel, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel, Cincinnati Oh",
          "Grand Hotel, Cincinnati oh",
          "Grand Hotel, Cincinnati, Oh",
          "Grand Hotel, cincinnati, Oh"
        ],
        "to": "Grand Hotel, Cincinnati Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rms Campania",
          "R.M.S. Campania",
          "R.M.S. campania",
          "R.M.S.  Campania"
        ],
        "to": "Rms Campania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Louis, Mo",
          "St. Louis, mo",
          "St Louis, mo",
          "St. Louis mo"
        ],
        "to": "St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Quebec, Canada",
          "Quebec, canada",
          "Quebec canada",
          "Quebec,  Canada"
        ],
        "to": "Quebec, Canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "London, England",
          "London, england",
          "london, england",
          "london, england "
        ],
        "to": "London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Queen City Club, cincinnati, Oh",
          "Queen City Club Cincinnati Oh",
          "Queen City Club cincinnati Oh",
          "Queen City Club, Cincinnati, Oh"
        ],
        "to": "Queen City Club Cincinnati Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young's Hotel, Boston, Ma",
          "Young's Hotel, boston Ma",
          "Youngs Hotel, Boston, Ma",
          "Youngs Hotel, boston, ma"
        ],
        "to": "Young's Hotel, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cincinnati, Oh",
          "Cincinnati oh",
          "Cincinnati, oh",
          "cincinnati, oh"
        ],
        "to": "Cincinnati, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Atlantic City, Nj",
          "Atlantic City, nj",
          "Atlantic City, N.J.",
          "atlantic City, Nj"
        ],
        "to": "Atlantic City, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Iroquois, Buffalo, Ny",
          "Hotel Iroquois, Buffalo, ny",
          "Hotel Iroquois, buffalo, n.Y.",
          "Hotel Iroquois, buffalo, ny"
        ],
        "to": "Hotel Iroquois, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Detroit, Mi",
          "Detroit, mi",
          "detroit, Mi",
          "detroit, mi"
        ],
        "to": "Detroit, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Hotel, New York, Ny",
          "Hotel Manhattan, New York, ny",
          "Hotel Manhattan, new York ny",
          "Hotel Manhattan, new York, Ny"
        ],
        "to": "Manhattan Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston, mass",
          "Boston, Mass",
          "Boston, Mass.",
          "boston, mass"
        ],
        "to": "Boston, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Melbourne, Australia",
          "Melbourne, australia",
          "Melbourne australia",
          "melbourne, australia"
        ],
        "to": "Melbourne, Australia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Clinton County, Ny",
          "Clinton County Ny",
          "Clinton County, Ny.",
          "Clinton County, ny"
        ],
        "to": "Clinton County, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copenhagen, Denmark",
          "Copenhagen, denmark",
          "copenhagen Denmark",
          "copenhagen, Denmark"
        ],
        "to": "Copenhagen, Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome Boston, Ma",
          "Hotel Vendome, Boston, Ma",
          "Hotel Vendome, boston, Ma",
          "Vendome Hotel, Boston, Ma"
        ],
        "to": "Hotel Vendome Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cleveland, Oh",
          "cleveland, Oh",
          "Cleveland, oh",
          "Cleveland oh"
        ],
        "to": "Cleveland, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Miami Biscayne Bay, fla.",
          "Miami Bay Biscayne, fla.",
          "Miami Biscayne Bay, Fla.",
          "Miami, biscayne Bay, fla."
        ],
        "to": "Miami Biscayne Bay, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paris, france",
          "Paris, France",
          "paris, France",
          "paris, france"
        ],
        "to": "Paris, france"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Arlington, Washington, D.C.",
          "The Arlington washington Dc",
          "The Arlington, Washington, Dc",
          "The Arlington, Washington, dc"
        ],
        "to": "The Arlington, Washington, D.C."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Coptic",
          "S.S. Coptic",
          "S.S. coptic"
        ],
        "to": "S.S. Coptic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Faneuil Hall, Boston, Ma",
          "Faneuil Hall, boston, Ma",
          "Faneuil Hall, boston, ma."
        ],
        "to": "Faneuil Hall, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Berlin, Germany",
          "Berlin germany",
          "Berlin, germany"
        ],
        "to": "Berlin, Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Algonquin Club, Boston, Ma",
          "New Algonquin Club boston, Ma",
          "New Algonquin Club, boston, Ma"
        ],
        "to": "New Algonquin Club, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pfister, Milwaukee, Wi",
          "Hotel Pfister, Milwaukee Wi",
          "Pfister Hotel, Milwaukee, Wi"
        ],
        "to": "Hotel Pfister, Milwaukee, Wi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cincinnati, ohio",
          "Cincinnati , Ohio",
          "Cincinnati, Ohio"
        ],
        "to": "Cincinnati, Ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Savoy Hotel, New York, Ny",
          "Hotel Savoy, New York, Ny",
          "Hotel Savoy, new York, ny"
        ],
        "to": "Savoy Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss: Kamakura Maru",
          "Ss: kamakura Maru",
          "Ss Kamakura Maru"
        ],
        "to": "Ss: Kamakura Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ellicott Square, Buffalo, Ny",
          "Ellicott Square, buffalo, ny",
          "Ellicott Square, Buffalo, ny"
        ],
        "to": "Ellicott Square, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S.barbarossa",
          "En Route - S.S.Barbarossa",
          "En Route S.S.Barbarossa"
        ],
        "to": "En Route S.S.Barbarossa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria, ny",
          "Waldorf-astoria ny",
          "Waldorf-astoria, Ny"
        ],
        "to": "Waldorf-astoria, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66 St. & B'way Ny",
          "66 St. & B'way. Ny",
          "66 St. & Bway. Ny"
        ],
        "to": "66 St. & B'way Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Logan House, Altoona, Pa",
          "Logan House, altoona, pa",
          "Logan House; Altoona, Pa"
        ],
        "to": "Logan House, Altoona, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adelaide australia",
          "Adelaide, Australia",
          "adelaide, Australia"
        ],
        "to": "Adelaide, Australia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, n.P.",
          "Nassau, Np",
          "nassau, N.P."
        ],
        "to": "Nassau, n.P."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hoffman House New York, Ny",
          "Hoffman House, New York, Ny",
          "Hoffman House, new York, ny"
        ],
        "to": "Hoffman House New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Zermatt, switzerland",
          "Zermatt switzerland",
          "zermatt, Switzerland"
        ],
        "to": "Zermatt, Switzerland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. empress Of China",
          "Rms Empress Of China",
          "R.M.S. Empress Of China"
        ],
        "to": "R.M.S. Empress Of China"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Saratoga Springs, Ny",
          "Saratoga Springs, ny",
          "Saratoga Springs, Ny."
        ],
        "to": "Saratoga Springs, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria, New York",
          "Waldorf-astoria new York",
          "Waldorf-astoria, new York"
        ],
        "to": "Waldorf-astoria, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York",
          "new York",
          "New York "
        ],
        "to": "New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. etruria",
          "R.M.S. Etruria",
          "Rms Etruria"
        ],
        "to": "R.M.S. etruria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Faneuil Hall, Boston, mass",
          "Faneuil Hall, boston, mass",
          "Faneuil Hall, boston, mass."
        ],
        "to": "Faneuil Hall, Boston, mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Westernland",
          "S.S. Westernland",
          "S.S. westernland"
        ],
        "to": "Ss Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Portland, Me",
          "Portland, me",
          "Portland Me"
        ],
        "to": "Portland, Me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St. Denis Hotel, "
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hollenden cleveland Oh",
          "The Hollenden, Cleveland Oh",
          "The Hollenden, Cleveland, Oh"
        ],
        "to": "The Hollenden, Cleveland, Oh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss City Of Para",
          "S.S. city Of Para",
          "S.S. city Of Para'"
        ],
        "to": "Ss City Of Para"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House, boston, mass",
          "Parker House boston, mass ",
          "Parker House, Boston, mass"
        ],
        "to": "Parker House, Boston, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic philadelphia, Pa",
          "Hotel Majestic, Philadelphia, Pa",
          "Majestic Hotel, Philadelphia. Pa"
        ],
        "to": "Hotel Majestic philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Southern Hotel, St. Louis, Mo",
          "Southern Hotel, st. Louis, Mo",
          "Southern Hotel, st. Louis, mo."
        ],
        "to": "Southern Hotel, St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss City Of Rio De Janeiro",
          "S.S. city Of Rio De Janeiro",
          "ss City Of Rio De Janeiro"
        ],
        "to": "Ss City Of Rio De Janeiro"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bergen, Norway",
          "Bergen, norway",
          "bergen, Norway"
        ],
        "to": "Bergen, Norway"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "At Sea",
          "at Sea",
          "at Sea "
        ],
        "to": "At Sea"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Syracuse Ny",
          "Syracuse, ny",
          "Syracuse, Ny"
        ],
        "to": "Syracuse Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cleveland, ohio",
          "Cleveland, Ohio",
          "Cleveland. Ohio"
        ],
        "to": "Cleveland, ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Virginia Beach, Va",
          "Virginia Beach Va",
          "Virginia Beach, va"
        ],
        "to": "Virginia Beach, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy, ny",
          "Hotel Savoy, Ny",
          "Hotel Savoy Ny"
        ],
        "to": "Hotel Savoy, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manila, P.I.",
          "Manila, Pi",
          "Manila, p.I."
        ],
        "to": "Manila, P.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick Hotel, Boston, Ma",
          "Hotel Brunswick, Boston, Ma",
          "Hotel Brunswick, Boston ma"
        ],
        "to": "Brunswick Hotel, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Naples italy",
          "Naples, italy",
          "Naples, Italy"
        ],
        "to": "Naples italy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. lucania",
          "Rms Lucania",
          "R.M.S. Lucania"
        ],
        "to": "R.M.S. lucania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore, Md",
          "Baltimore, md",
          "Baltimore, md."
        ],
        "to": "Baltimore, Md"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Montreal canada",
          "Montreal, Canada",
          "Montreal, canada"
        ],
        "to": "Montreal canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa, Fl",
          "Tampa, fl",
          "Tampa Fl"
        ],
        "to": "Tampa, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League, philadelphia, pa",
          "Union League Philadelphia pa",
          "Union League, philadelphia, Pa"
        ],
        "to": "Union League, philadelphia, pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough, New York, Ny",
          "Hotel Marlborough, new York, Ny",
          "Marlborough Hotel, New York, Ny"
        ],
        "to": "Hotel Marlborough, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Commercial Club, Portland, Or",
          "Commercial Club, portland, Or",
          "Portland Commercial Club, Portland, Or"
        ],
        "to": "Commercial Club, Portland, Or"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston, Ma",
          "Boston, ma.",
          "Boston Ma"
        ],
        "to": "Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel, new Orleans, la",
          "St. Charles Hotel, New Orleans La",
          "St. Charles Hotel, New Orleans, La"
        ],
        "to": "St. Charles Hotel, new Orleans, la"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ellicott Club, Buffalo, Ny",
          "Ellicott Club, buffalo, ny",
          "Ellicott Club buffalo Ny"
        ],
        "to": "Ellicott Club, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 Broad Street, New York, ny",
          "57 Broad Street, new York, ny",
          "57 Broad Street, New York, Ny"
        ],
        "to": "57 Broad Street, New York, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Havana, Cuba",
          "Havana, cuba",
          "havana, cuba"
        ],
        "to": "Havana, Cuba"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's, New York City",
          "New York City Delmonico's",
          "New York City, Delmonico's"
        ],
        "to": "Delmonico's, New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lakewood, Nj",
          "Lakewood Nj",
          "Lakewood, N.J."
        ],
        "to": "Lakewood, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Club st Louis, Mo",
          "Mercantile Club, St Louis mo",
          "Mercantile Club, St. Louis, Mo"
        ],
        "to": "Mercantile Club, St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George, Nyack, Ny",
          "Hotel St. George, nyack, ny",
          "St. George Hotel, Nyack, Ny"
        ],
        "to": "Hotel St. George, Nyack, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cecil Hotel, London, England",
          "Cecil Hotel, london, england",
          "Hotel Cecil, London, England"
        ],
        "to": "Cecil Hotel, London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ny",
          "ny",
          "n.Y."
        ],
        "to": "Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Kasuga",
          "S.S. Kasuga",
          "Ss: Kasuga"
        ],
        "to": "Ss Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Denver, Colo.",
          "Denver, Colo",
          "Denver, colo."
        ],
        "to": "Denver, Colo."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Argyle, the, brooklyn, ny",
          "Argyle, The, Brooklyn, Ny",
          "The Argyle, Brooklyn, Ny"
        ],
        "to": "The Argyle, Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Marlborough Hotel, ",
          "Hotel Marlborough",
          "Hotel Marlborough, "
        ],
        "to": "Marlborough Hotel, "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Somerset, Boston, Ma",
          "Hotel Somerset, Boston, ma",
          "Hotel Somerset, boston, Ma"
        ],
        "to": "Hotel Somerset, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Whitehall Rooms, The Hotel Metropole, London england",
          "Whitehall Rooms, The Hotel Metropole, London, england",
          "Whitehall Rooms, the Hotel Metropole, London, england"
        ],
        "to": "Whitehall Rooms, The Hotel Metropole, London england"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. Denis, Ny",
          "Hotel St. Denis, ny",
          "St. Denis Hotel Ny"
        ],
        "to": "Hotel St. Denis, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Tontine Hotel, New Haven ct",
          "Tontine Hotel, New Haven, Ct",
          "Tontine Hotel, new Haven, Ct"
        ],
        "to": "New Tontine Hotel, New Haven ct"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "tokyo, Japan",
          "Tokyo, Japan",
          "tokyo, japan"
        ],
        "to": "tokyo, Japan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel",
          "Savoy Hotel, "
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dampfer H.H. Meier",
          "Dampfer h.H. Meier"
        ],
        "to": "Dampfer H.H. Meier"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Astor Hotel, New York, Ny",
          "Hotel Astor, New York, Ny"
        ],
        "to": "Astor Hotel, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cataract House, Niagara Falls, Ny",
          "Cataract House, niagara Falls, ny"
        ],
        "to": "Cataract House, Niagara Falls, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Omaha Nebraska",
          "Omaha, Nebraska"
        ],
        "to": "Omaha Nebraska"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Square, Ny",
          "Union Square, ny"
        ],
        "to": "Union Square, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route h.H.Meier",
          "En Route  H.H.Meier"
        ],
        "to": "En Route h.H.Meier"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Square, New York, Ny",
          "Union Square, new York, ny"
        ],
        "to": "Union Square, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Konigin Luise",
          "konigin Luise"
        ],
        "to": "Konigin Luise"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pittsburgh, Pa",
          "pittsburgh, Pa"
        ],
        "to": "Pittsburgh, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "114 West Fourteenth Street, New York",
          "114 West Fourteenth Street, new York"
        ],
        "to": "114 West Fourteenth Street, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Germany",
          "germany"
        ],
        "to": "Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, n.P.Bahamas",
          "Nassau, npbahamas"
        ],
        "to": "Nassau, n.P.Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Willard washington, [dc",
          "New Willard, Washington, Dc"
        ],
        "to": "New Willard, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dampfer Kaiser Wilhelm Der Grosse",
          "Dampfer kaiser Wilhelm Der Grosse"
        ],
        "to": "Dampfer Kaiser Wilhelm Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House, Mass",
          "Parker House, mass"
        ],
        "to": "Parker House, Mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lake George, ny",
          "lake George, Ny"
        ],
        "to": "Lake George, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bourse, philadelphia, pa",
          "Philadelphia Bourse, philadelphia, pa"
        ],
        "to": "Bourse, philadelphia, pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Convention Hall, Buffalo, Ny",
          "Convention Hall, buffalo, Ny"
        ],
        "to": "Convention Hall, Buffalo, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rector's , ny",
          "Rector's, ny"
        ],
        "to": "Rector's , ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Revere House, boston, mass",
          "Revere House, boston, mass."
        ],
        "to": "Revere House, boston, mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ascot england",
          "Ascot, England"
        ],
        "to": "Ascot england"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "374 Fifth Avenue, Ny, Ny",
          "374 Fifth Avenue, ny, ny"
        ],
        "to": "374 Fifth Avenue, Ny, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Place Viger, montreal, canada",
          "Place Viger Hotel, montreal, Canada"
        ],
        "to": "Hotel Place Viger, montreal, canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Amsterdam, holland",
          "amsterdam, Holland "
        ],
        "to": "Amsterdam, holland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn",
          "Penn."
        ],
        "to": "Penn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard R.M.S. etruria",
          "Aboard R.M.S. Etruria"
        ],
        "to": "Aboard R.M.S. etruria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg, germany",
          "Hamburg, Germany"
        ],
        "to": "Hamburg, germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ocean House, Newport, Ri",
          "Ocean House, newport, r.I."
        ],
        "to": "Ocean House, Newport, Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baker City, Oregon",
          "Baker City, oregon"
        ],
        "to": "Baker City, Oregon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Asheville, nc",
          "Asheville, Nc"
        ],
        "to": "Asheville, nc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chamberlin's washington, dc",
          "Chamberlin's, washington, d.C."
        ],
        "to": "Chamberlin's washington, dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "Union Club, "
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chattanooga, tenn.",
          "Chattanooga, Tenn."
        ],
        "to": "Chattanooga, tenn."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lincoln Club - Ny",
          "Lincoln Club ny"
        ],
        "to": "Lincoln Club - Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bangkok, Thailand",
          "Bangkok, thailand"
        ],
        "to": "Bangkok, Thailand"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Auditorium, Chicago, Il",
          "Auditorium, chicago, Il"
        ],
        "to": "Auditorium, Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Augustine, Fla",
          "St. Augustine, Fla."
        ],
        "to": "St. Augustine, Fla"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Morello's, New York, Ny",
          "Morello's, new York, N.Y."
        ],
        "to": "Morello's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Haven Ct",
          "New Haven ct"
        ],
        "to": "New Haven, Ct"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pullman Dining Car Service En Route",
          "Pullman Dining Car Service en Route"
        ],
        "to": "Pullman Dining Car Service En Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nassau, bahamas",
          "Nassau, Bahamas"
        ],
        "to": "Nassau, Bahamas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S Vaderland",
          "En Route S.S. Vaderland"
        ],
        "to": "En Route S.S Vaderland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Helena, Mt",
          "Helena, mt"
        ],
        "to": "Helena, Mt"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Academy Of Music Brooklyn, Ny",
          "Academy Of Music, brooklyn, Ny"
        ],
        "to": "Academy Of Music Brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Belmar, nj",
          "Belmar, Nj"
        ],
        "to": "Belmar, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's, New York, Ny",
          "Sherry's, new York, Ny"
        ],
        "to": "Sherry's, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York City",
          "new York City"
        ],
        "to": "New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lucerne, switzerland",
          "lucerne, switzerland"
        ],
        "to": "Lucerne, switzerland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel san Francisco, Ca",
          "Fairmont Hotel, San Francisco, Ca"
        ],
        "to": "Fairmont Hotel san Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Park Row Bldg. ny",
          "Park Row Bldg., ny, Ny"
        ],
        "to": "Park Row Bldg., ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson, St. Louis, Mo",
          "Jefferson Hotel, St. Louis mo"
        ],
        "to": "Hotel Jefferson, St. Louis, Mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waco, Tx",
          "Waco, tx"
        ],
        "to": "Waco, Tx"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue-stratford, philadelphia, Pa",
          "Bellevue-stratford, Philadelphia, Pa"
        ],
        "to": "Bellevue-stratford, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route",
          "en Route"
        ],
        "to": "En Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Niagara Falls, Ny",
          "Niagara Falls, ny"
        ],
        "to": "Niagara Falls, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Paquebot La Provence",
          "Aboard Paquebot la Provence"
        ],
        "to": "Aboard Paquebot La Provence"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Plaza",
          "Plaza, The"
        ],
        "to": "The Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbus, Ohio",
          "Columbus, ohio"
        ],
        "to": "Columbus, Ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome, ny",
          "Vendome Hotel, ny"
        ],
        "to": "Hotel Vendome, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa, Florida",
          "Tampa, florida"
        ],
        "to": "Tampa, Florida"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colorado Springs, Co",
          "colorado Springs, Co"
        ],
        "to": "Colorado Springs, Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Stenton philadelphia Pa",
          "Hotel Stenton, Philadelphia, Pa"
        ],
        "to": "Hotel Stenton philadelphia Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bohemian Club, San Francisco, Ca",
          "Bohemian Club, San Francisco, ca"
        ],
        "to": "Bohemian Club, San Francisco, Ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Trinidad",
          "S.S. trinidad"
        ],
        "to": "Ss Trinidad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "White Mountains, Nh",
          "White Mountains, n.H."
        ],
        "to": "White Mountains, Nh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Paquebot La Touraine",
          "Aboard Paquebot la Touraine"
        ],
        "to": "Aboard Paquebot La Touraine"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Liverpool [england}",
          "Liverpool, england"
        ],
        "to": "Liverpool, england"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Auditorium",
          "Auditorium, "
        ],
        "to": "Auditorium"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chattanooga, Tn",
          "Chattanooga, tn"
        ],
        "to": "Chattanooga, Tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Continental paris, France",
          "Hotel Continental, paris, France"
        ],
        "to": "Hotel Continental paris, France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York City, Ny",
          "New York City, ny"
        ],
        "to": "New York City, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Glenwood Springs, Co",
          "glenwood Springs, Co"
        ],
        "to": "Glenwood Springs, Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Frankfurt, Germany",
          "frankfurt, Germany"
        ],
        "to": "Frankfurt, Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Paquebot la Savoie",
          "Aboard Paquebot La Savoie"
        ],
        "to": "Aboard Paquebot la Savoie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pawling, Ny",
          "Pawling Ny"
        ],
        "to": "Pawling, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Bellevue-stratford, Philadelphia, Pa",
          "The Bellevue-stratford, philadelphia, Pa"
        ],
        "to": "The Bellevue-stratford, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S.Rotterdam",
          "Rms-rotterdam"
        ],
        "to": "R.M.S.Rotterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young's Hotel",
          "Young's Hotel "
        ],
        "to": "Young's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lincoln Club {brooklyn, Ny}",
          "Lincoln Club, brooklyn, ny"
        ],
        "to": "Lincoln Club, brooklyn, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel, London, England",
          "Grand Hotel, london, England"
        ],
        "to": "Grand Hotel, London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Kaiser Wilhelm Der Grosse",
          "S.S. kaiser Wilhelm Der Grosse"
        ],
        "to": "Ss Kaiser Wilhelm Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard 'prinz Friedrich Wilhelm'",
          "Aboard Prinz Friedrich Wilhelm''"
        ],
        "to": "Aboard 'prinz Friedrich Wilhelm'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Above",
          "En Route Aboard Above "
        ],
        "to": "En Route Aboard Above"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel, Melbourne",
          "Grand Hotel, melbourne"
        ],
        "to": "Grand Hotel, Melbourne"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mechanics Hall, boston, Ma",
          "Mechanics' Hall, Boston, Ma"
        ],
        "to": "Mechanics Hall, boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "130 Broadway, New York",
          "130 Broadway, new York"
        ],
        "to": "130 Broadway, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Albany Club albany, ny",
          "Albany Club, Albany, Ny"
        ],
        "to": "Albany Club albany, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Eagle Hotel gettysburg, Pa",
          "Eagle Hotel, Gettysburg, Pa"
        ],
        "to": "Eagle Hotel gettysburg, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough, ny",
          "Marlborough Hotel, Ny"
        ],
        "to": "Hotel Marlborough, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Russell House, Detroit, Mi",
          "Russell House Detroit, Mi"
        ],
        "to": "Russell House, Detroit, Mi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Orleans, La",
          "New Orleans, la"
        ],
        "to": "New Orleans, La"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Campidoglio, New York, Ny",
          "Hotel Del Campidoglio, new York, N.Y."
        ],
        "to": "Hotel Del Campidoglio, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria, New York, Ny",
          "Waldorf Astoria, new York, ny"
        ],
        "to": "Waldorf Astoria, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hoffman House, Madison Square, Ny",
          "hoffman House, madison Square, ny"
        ],
        "to": "Hoffman House, Madison Square, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Munich, Germany",
          "Munich, germany"
        ],
        "to": "Munich, Germany"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bar Harbor me",
          "Bar Harbor, Me"
        ],
        "to": "Bar Harbor me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schnelldampfer auguste Victoria",
          "Schnelldampfer: auguste Victoria"
        ],
        "to": "Schnelldampfer auguste Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Doric",
          "S.S. doric"
        ],
        "to": "Ss Doric"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Cochran, Washington Dc",
          "Hotel Cochran, washington, d.C."
        ],
        "to": "Hotel Cochran, Washington Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "California",
          "california"
        ],
        "to": "California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Zealandia",
          "Ss Zealandia"
        ],
        "to": "S.S. Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Schenley, Pittsburgh, Pa",
          "Schenley Hotel, pittsburgh, pa."
        ],
        "to": "Hotel Schenley, Pittsburgh, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route S.S. Zeeland",
          "En Route S.S Zeeland"
        ],
        "to": "En Route S.S. Zeeland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick, the, boston, mass",
          "The Brunswick, Boston, mass"
        ],
        "to": "Brunswick, the, boston, mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Gramercy Park 52 Gramercy Park North",
          "Gramercy Park Hotel; Hotel Gramercy Park 52 Gramercy Park North"
        ],
        "to": "Hotel Gramercy Park 52 Gramercy Park North"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League",
          "union League"
        ],
        "to": "Union League"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Miramar ",
          "miramar"
        ],
        "to": "Miramar "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Paquebot La Lorraine",
          "Aboard Paquebot la Lorraine"
        ],
        "to": "Aboard Paquebot La Lorraine"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tacoma Wa",
          "Tacoma, [wa}"
        ],
        "to": "Tacoma Wa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Park Row Building new York, ny",
          "Park Row Building, New York, Ny"
        ],
        "to": "Park Row Building new York, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Planters Hotel, St.Louis, mo",
          "Planters Hotel, st.Louis, Mo"
        ],
        "to": "Planters Hotel, St.Louis, mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toronto, Canada",
          "Toronto, canada"
        ],
        "to": "Toronto, Canada"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dwlmonico's Ny",
          "Dwlmonico's, ny"
        ],
        "to": "Dwlmonico's Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 Broad Street, Ny",
          "57 Broad Street - Ny"
        ],
        "to": "57 Broad Street, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss. Kasuga",
          "En Route Aboard Ss Kasuga"
        ],
        "to": "En Route Aboard Ss. Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aboard Paquebot La Bretagne",
          "Aboard Paquebot la Bretagne"
        ],
        "to": "Aboard Paquebot La Bretagne"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Round Table Club",
          "round Table Club"
        ],
        "to": "Round Table Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fargo, North Dakota",
          "Fargo, north Dakota"
        ],
        "to": "Fargo, North Dakota"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Empress Of India",
          "R.M.S. empress Of India"
        ],
        "to": "R.M.S. Empress Of India"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole, Manila, P.I.",
          "Metropole Hotel, manila, p.I."
        ],
        "to": "Hotel Metropole, Manila, P.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Portland, Or",
          "Portland, or."
        ],
        "to": "Portland, Or"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Minneapolis Club Minneapolis, Mn",
          "Minneapolis Club, Minneapolis, Mn"
        ],
        "to": "Minneapolis Club Minneapolis, Mn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard S.S. Friesland",
          "En Route Aboard Ss Friesland"
        ],
        "to": "En Route Aboard S.S. Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Queen City Club, Cincinnati , ohio",
          "Queen City Club, cincinnati, ohio"
        ],
        "to": "Queen City Club, Cincinnati , ohio"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Argyle, the, ny",
          "The Argyle, ny"
        ],
        "to": "Argyle, the, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss Kasuga Maru",
          "En Route Aboard Ss. Kasuga Maru"
        ],
        "to": "En Route Aboard Ss Kasuga Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bway & 63rd St. Ny",
          "B'way & 63rd St. Ny"
        ],
        "to": "Bway & 63rd St. Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Maxwell House, Nashville, tn",
          "Maxwell House, Nashville, Tn"
        ],
        "to": "Maxwell House, Nashville, tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "st.Louis, mo",
          "st.Louis, Mo"
        ],
        "to": "st.Louis, mo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Zinzendorf, Winston-salem, Nc",
          "Zinzendorf Hotel, Winston-salem, Nc"
        ],
        "to": "Hotel Zinzendorf, Winston-salem, Nc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nashville, tn",
          "Nashville, Tn"
        ],
        "to": "Nashville, tn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adirondacks, Ny",
          "Adirondacks ny"
        ],
        "to": "Adirondacks, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Ten Eyck, Albany, Ny",
          "Ten Eyck, The, Albany, Ny"
        ],
        "to": "The Ten Eyck, Albany, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Butler, Pa",
          "Butler, Pa."
        ],
        "to": "Butler, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Deeming Hall, Ithaca, Ny",
          "Deeming Hall, ithaca, ny"
        ],
        "to": "Deeming Hall, Ithaca, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "West End Hotel, New Orleans, La",
          "West End Hotel, New Orleans, la."
        ],
        "to": "West End Hotel, New Orleans, La"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Franconia Notch Nh",
          "Franconia Notch Nh,"
        ],
        "to": "Franconia Notch Nh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Altoona, Pa",
          "Altoona, pa"
        ],
        "to": "Altoona, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "139 Eighth Street Bet. Broadway And 4th Ave., New York ny",
          "139 Eighth Street, Bet. Broadway And 4th Ave., New York, ny"
        ],
        "to": "139 Eighth Street Bet. Broadway And 4th Ave., New York ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Los Angeles, ca",
          "Los Angeles, Ca"
        ],
        "to": "Los Angeles, ca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan, New York",
          "Hotel Manhattan, new York"
        ],
        "to": "Hotel Manhattan, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Milwaukee, Wi",
          "Milwaukee, wi"
        ],
        "to": "Milwaukee, Wi"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Hotel, Philadelphia, Pa",
          "Hotel Bellevue, Philadelphia pa"
        ],
        "to": "Bellevue Hotel, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palais Royal - Christiania, norway",
          "palais Royal, Christiania, Norway"
        ],
        "to": "Palais Royal - Christiania, norway"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Krueger Auditorium newark Nj",
          "Krueger Auditorium, Newark, Nj"
        ],
        "to": "Krueger Auditorium newark Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Walton, philadelphia, pa",
          "Hotel Walton, Philadelphia pa"
        ],
        "to": "Hotel Walton, philadelphia, pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "137 E. Madison St. Chicago, Ill.",
          "137 E. Madison St., chicago, ill."
        ],
        "to": "137 E. Madison St. Chicago, Ill."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club, New York, Ny",
          "Union League Club, new York, Ny"
        ],
        "to": "Union League Club, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Roanoke, Va",
          "Roanoke, va"
        ],
        "to": "Roanoke, Va"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "South Poland, Me",
          "South Poland, me."
        ],
        "to": "South Poland, Me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Auditorium, chicago, ill",
          "The Auditorium, chicago, ill."
        ],
        "to": "The Auditorium, chicago, IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss friedrich Der Grosse",
          "Ss Friedrich Der Grosse"
        ],
        "to": "Ss friedrich Der Grosse"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor, New York",
          "Hotel Astor, new York"
        ],
        "to": "Hotel Astor, New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Malone, Ny",
          "Malone, ny"
        ],
        "to": "Malone, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa, fla.",
          "Tampa, Fla."
        ],
        "to": "Tampa, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Miami Biscayne Bay, Fl",
          "Miami Biscayne Bay, fl"
        ],
        "to": "Miami Biscayne Bay, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Waldorf, new York, Ny",
          "The Waldorf, New York, Ny"
        ],
        "to": "The Waldorf, new York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "383 6th Ave., 1212 Bway., & 1476 Bway. Ny",
          "383 6th Ave., 1476 Bway., 1212 Bway., Ny"
        ],
        "to": "383 6th Ave., 1212 Bway., & 1476 Bway. Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Pacific Hotel, Chicago, Il",
          "Grand Pacific Hotel chicago, Il"
        ],
        "to": "Grand Pacific Hotel, Chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel new York",
          "St. Denis Hotel, New York"
        ],
        "to": "St. Denis Hotel new York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Terrace Garden",
          "Terrace Garden, "
        ],
        "to": "Terrace Garden"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66th St. & Bway Ny",
          "66th St & B'way, Ny"
        ],
        "to": "66th St. & Bway Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Coronada Beach, Ca.",
          "Coronada Beach, ca."
        ],
        "to": "Coronada Beach, Ca."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mobile Al",
          "Mobile, al."
        ],
        "to": "Mobile, Al"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Narragansett Hotel, Providence Ri",
          "Narragansett Hotel, Providence, Ri"
        ],
        "to": "Narragansett Hotel, Providence Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Inn, Portland Or",
          "American Inn, Portland, or"
        ],
        "to": "American Inn, Portland Or"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tremont Temple, Boston, Mass.",
          "Tremont Temple, boston Mass"
        ],
        "to": "Tremont Temple, Boston, Mass."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nyc",
          "nyc"
        ],
        "to": "Nyc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Raleigh, Washington, Dc",
          "The Raleigh, Washington Dc"
        ],
        "to": "The Raleigh, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Albany, Ny",
          "Albany, ny"
        ],
        "to": "Albany, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Horticultural Hall, Philadelphia, Pa",
          "Horticultural Hall, Philadelphia pa"
        ],
        "to": "Horticultural Hall, Philadelphia, Pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Az",
          "az"
        ],
        "to": "Az"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Arcanum Hall, elizabeth Nj",
          "Arcanum Hall, elizabeth, nj"
        ],
        "to": "Arcanum Hall, elizabeth Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Wellington, Providence Ri",
          "Wellington, The, Providence, Ri"
        ],
        "to": "The Wellington, Providence Ri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "fla",
          "fla."
        ],
        "to": "FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fargo, Nd",
          "Fargo, nd"
        ],
        "to": "Fargo, Nd"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Walnut Rooms, The Grand Hotel, Trafalgar Square, London, England",
          "The Walnut Rooms The Grand Hotel, Trafalgar Square, london, england"
        ],
        "to": "The Walnut Rooms, The Grand Hotel, Trafalgar Square, London, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pinehurst, n.C.",
          "Pinehurst, Nc"
        ],
        "to": "Pinehurst, n.C."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hoboken, Nj",
          "Hoboken, nj"
        ],
        "to": "Hoboken, Nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf-astoria, The, New York, Ny",
          "Waldorf-astoria, the, new York, ny"
        ],
        "to": "Waldorf-astoria, The, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Campobello Island",
          "Campobello Island,"
        ],
        "to": "Campobello Island"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Athletic Club",
          "New York Athletic Club, new York"
        ],
        "to": "New York Athletic Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palm Beach, Fl",
          "Palm Beach, fl"
        ],
        "to": "Palm Beach, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Bellevue",
          "Bellevue Hotel"
        ],
        "to": "Hotel Bellevue"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House, Boston, Ma",
          "Parker House, boston, ma"
        ],
        "to": "Parker House, Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard Ss Kobe Maru",
          "En Route Aboard Ss. Kobe Maru"
        ],
        "to": "En Route Aboard Ss Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nos. 667 To 677 broadway], Opposite Bond Street, Midway Between Battery And Central Park, New York [ny",
          "Nos. 667 To 677 broadway], Opposite Bond Street, Midway Between Battery And Central Park, New York, [ny"
        ],
        "to": "Nos. 667 To 677 broadway, Opposite Bond Street, Midway Between Battery And Central Park, New York ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Broadway, Ny",
          "Broadway, ny"
        ],
        "to": "Broadway, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Castle, England",
          "Windsor Castle, england"
        ],
        "to": "Windsor Castle, England"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's, Ny",
          "Shanley's, ny"
        ],
        "to": "Shanley's, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Springfield, mass.",
          "Springfield, Mass."
        ],
        "to": "Springfield, mass."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Watson House, Bablon, L.I., N.Y.",
          "Watson House, bablon, L.I. N.Y."
        ],
        "to": "Watson House, Bablon, L.I., N.Y."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Cochran, Washington, Dc",
          "The Cochran, Washington, d.C."
        ],
        "to": "The Cochran, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brunswick Me",
          "Brunswick, me."
        ],
        "to": "Brunswick Me"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Luzern, Switzerland",
          "Luzern, switzerland"
        ],
        "to": "Luzern, Switzerland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nashville, Tenn",
          "Nashville, Tenn."
        ],
        "to": "Nashville, Tenn"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Willard, Washington, Dc",
          "Willard Hotel, washington, Dc"
        ],
        "to": "Hotel Willard, Washington, Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Waldorf Astoria",
          "Waldorf Astoria, The"
        ],
        "to": "The Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. Nacoochee",
          "Ss Nacoochee"
        ],
        "to": "S.S. Nacoochee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Westernland, En Route",
          "Ss Westernland - En Route"
        ],
        "to": "Ss Westernland, En Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss Rio De Janeiro",
          "Ss: Rio De Janeiro"
        ],
        "to": "Ss Rio De Janeiro"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rms Oceanic",
          "R.M.S. Oceanic"
        ],
        "to": "Rms Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico, new York Ny",
          "Delmonico, new York, Ny"
        ],
        "to": "Delmonico, new York Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Petersburg russia",
          "St. Petersburg, russia"
        ],
        "to": "St. Petersburg russia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Murray Hill Hotel, ny",
          "Murray Hill Hotel ny"
        ],
        "to": "Murray Hill Hotel, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Budapest, Hungary",
          "Budapest, hungary"
        ],
        "to": "Budapest, Hungary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Saratoga, Ny",
          "Saratoga, ny"
        ],
        "to": "Saratoga, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club Ny",
          "Union League Club, Ny"
        ],
        "to": "Union League Club Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Metropolitan Club, New York, Ny",
          "Metropolitan Club, new York, Ny"
        ],
        "to": "Metropolitan Club, New York, Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "156 Second Avenue ny",
          "156 Second Avenue, ny"
        ],
        "to": "156 Second Avenue ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Taylor's Hotel, Jersey City nj",
          "Taylor's Hotel, Jersey City, N.J."
        ],
        "to": "Taylor's Hotel, Jersey City nj"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Buckingham Palace,  London, england",
          "Buckingham Palace, London, England"
        ],
        "to": "Buckingham Palace,  London, england"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Augustine, fla.",
          "St.Augustine, Fla."
        ],
        "to": "St.Augustine, fla."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicago Beach Hotel chicago, Il",
          "Chicago Beach Hotel, Chicago, il"
        ],
        "to": "Chicago Beach Hotel chicago, Il"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico's",
          "Delmonicos"
        ],
        "to": "Delmonico's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Bourse, Philadelphia pa",
          "The Bourse, philadelphia, pa"
        ],
        "to": "The Bourse, Philadelphia pa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Argyle ",
          "the Argyle"
        ],
        "to": "The Argyle "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Beach, Long Island ny",
          "Manhattan Beach, Long Island, ny"
        ],
        "to": "Manhattan Beach, Long Island ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Park Row Building ny",
          "Park Row Building, ny"
        ],
        "to": "Park Row Building ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Arlington, wash.Dc",
          "The Arlington, wash.Dc."
        ],
        "to": "The Arlington, wash.Dc"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "En Route Aboard S.S. Kobe Waru",
          "En Route Aboard S.S. kobe Waru"
        ],
        "to": "En Route Aboard S.S. Kobe Waru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Residence-palais, Copenhagen, Denmark",
          "residence-palais, Copenhagen, Denmark"
        ],
        "to": "Residence-palais, Copenhagen, Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonico, ny",
          "Delmonico ny"
        ],
        "to": "Delmonico, ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Pacific Hotel",
          "Grand Pacific Hotel,"
        ],
        "to": "Grand Pacific Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome boston, Mass",
          "Hotel Vendome, Boston, mass"
        ],
        "to": "Hotel Vendome boston, Mass"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Germantown pa",
          "germantown, Pa"
        ],
        "to": "Germantown pa"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Miami Biscayne Bay, Fl",
          "Miami Biscayne Bay, FL"
        ],
        "to": "Miami Biscayne Bay, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tampa, Fl",
          "Tampa, FL"
        ],
        "to": "Tampa, Fl"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Boston, Ma",
          "Boston, MA"
        ],
        "to": "Boston, Ma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Parker House, Boston, MA",
          "Parker House, Boston, Ma"
        ],
        "to": "Parker House, Boston, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Auditorium chicago, Il",
          "The Auditorium, chicago, IL"
        ],
        "to": "The Auditorium chicago, Il"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/\\[.+\\]/, '$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/\\[.+\\]/, '$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/\\[(.+)\\]/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/\\[(.+)\\]/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/(\\\"|\\?|\\(|\\)|\\\\|\\{|\\})/, '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/(\\\"|\\?|\\(|\\)|\\\\|\\{|\\})/, '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line   Antwerpen  Ny",
          "Red Star Line   Antwerpen   Ny",
          "Red Star Line   Antwerpen Ny",
          "Red Star Line  Antwerpen  Ny",
          "Red Star Line   Antwerpen    Ny",
          "Red Star Line  Antwerpen   Ny",
          "Red Star Line  Antwerpen Ny"
        ],
        "to": "Red Star Line   Antwerpen  Ny"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd   Bremen",
          "Norddeutscher Lloyd  Bremen",
          "Norddeutscher Lloyd    Bremen",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd Bremen;"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant name and/or location not given",
          "Restaurant Name And/Or Location Not Given",
          "Restaurant name and/or location not given]",
          "Restaurant name and/or location not given ",
          "[Restaurant name and/or location not given"
        ],
        "to": "Restaurant name and/or location not given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd   Bremen",
          "Nordeutscher Lloyd, Bremen"
        ],
        "to": "Nordeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie",
          "Hamburg   Amerika Linie",
          "Hamburg  Amerika Linie"
        ],
        "to": "Hamburg Amerika Linie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F. Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F. Lang's Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker ",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "Usms",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. New York",
          "Usms New York",
          "U.S.M.S New York"
        ],
        "to": "U.S.M.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchant's Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants' Club",
          "Merchants Club"
        ],
        "to": "Merchant's Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis",
          "St, Denis Hotel"
        ],
        "to": "St. Denis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toyo Kisen Kaisha   Hong Kong Maru",
          "Toyo Kisen Kaisha   Hong Kong  Maru",
          "Toyo Kisen Kaisha  Hong Kong Maru"
        ],
        "to": "Toyo Kisen Kaisha   Hong Kong Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Guard Albany Zouave Cadets",
          "Albany Zouave Cadets   Old Guard",
          "Albany Zouave Cadets Old Guard"
        ],
        "to": "Old Guard Albany Zouave Cadets"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editor's Association",
          "American Medical Editors' Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editor's Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore",
          "Hotel  Baltimore"
        ],
        "to": "Baltimore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha   S.S.Kobe Maru",
          "Nippon Yusen Kaisha  S.S.Kobe Maru"
        ],
        "to": "Nippon Yusen Kaisha   S.S.Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha   S.S.Kasuga",
          "Nippon Yusen Kaisha  S.S.Kasuga"
        ],
        "to": "Nippon Yusen Kaisha   S.S.Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club Of Chicago",
          "The Merchants Club Of Chicago"
        ],
        "to": "The Merchant's Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "Alta Vista Hotel "
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St. Patrick",
          "Friendly Sons Of St Patrick"
        ],
        "to": "Friendly Sons Of St. Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "Cie. Gle. Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chamber Of Commerce",
          "Chamber of Commerce"
        ],
        "to": "Chamber Of Commerce"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "De L'ange Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient And Honorable Artillery Co Of Massachusetts",
          "Ancient And Honorable Artillery Co. Of Massachusetts"
        ],
        "to": "Ancient And Honorable Artillery Co Of Massachusetts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "The New Willard Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co.   Sierra",
          "Oceanic Steamship Co.  Sierra"
        ],
        "to": "Oceanic Steamship Co.   Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Francis Hotel",
          "Hotel St. Francis"
        ],
        "to": "St. Francis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In The State Of New York",
          "Society Of The Society Of Colonial Wars In The State Of New York"
        ],
        "to": "Society Of Colonial Wars In The State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Laurel In The Pines",
          "Laurel in the Pines"
        ],
        "to": "Laurel In The Pines"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Del Prado Hotel",
          "Hotel Del Prado"
        ],
        "to": "Del Prado Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs' Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co.   S.S.Zealandia",
          "Oceanic Steamship Co. S.S.Zealandia"
        ],
        "to": "Oceanic Steamship Co.   S.S.Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Engineers Club",
          "Engineers' Club"
        ],
        "to": "Engineers Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Healy's Forty-second Street restaurant",
          "Healy's Forty-second Street Restaurant"
        ],
        "to": "Healy's Forty-second Street restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Republican Club Of The City Of New York",
          "Republican Club of the City of New York"
        ],
        "to": "Republican Club Of The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " Club",
          "Club"
        ],
        "to": " Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Fairmont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Alcazar",
          "Alcazar Hotel"
        ],
        "to": "Hotel Alcazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Nicholas Hotel",
          "Hotel St. Nicholas"
        ],
        "to": "St. Nicholas Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Casino   Central Park",
          "Casino Central Park"
        ],
        "to": "Casino   Central Park"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Pacific  Railroad",
          "Union Pacific Railroad"
        ],
        "to": "Union Pacific  Railroad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Cosmopolitan Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colombo",
          "Colombo Hotel"
        ],
        "to": "Hotel Colombo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company  S.S.Zealander",
          "Oceanic Steamship Company   S.S.Zealander"
        ],
        "to": "Oceanic Steamship Company  S.S.Zealander"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirate's House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of The Sons Of The American Revolution",
          "Michigan Society Sons Of The American Revolution"
        ],
        "to": "Michigan Society Of The Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchant's Club Of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line Antwerpen New York",
          "Red Star Line   Antwerpen  New York"
        ],
        "to": "Red Star Line Antwerpen New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriff's Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line   S.S.Westernland",
          "Red Star Line S.S.Westernland"
        ],
        "to": "Red Star Line   S.S.Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Tavern On The Green",
          "The Tavern On The Green"
        ],
        "to": "Tavern On The Green"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Minot Hotel",
          "Hotel Minot"
        ],
        "to": "Minot Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant And/Or Location Not Given.",
          "Restaurant And/Or Location Not Given"
        ],
        "to": "Restaurant And/Or Location Not Given."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Kempinski Restaurant",
          "Restaurant Kempinski"
        ],
        "to": "Kempinski Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S New Amsterdam",
          "S.S. New Amsterdam"
        ],
        "to": "S.S New Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherry's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Ambassador Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Bristol Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalder's Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Commodore Hotel",
          "The Hotel Commodore"
        ],
        "to": "The Commodore Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Algonquin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willard's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Ballroom Of The Hotel Plaza",
          "The Grand Ballroom Of The Hotel Plaza"
        ],
        "to": "Grand Ballroom Of The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co.   S.S.Athabasca",
          "Canadian Pacific Railway Co.  S.S.Athabasca"
        ],
        "to": "Canadian Pacific Railway Co.   S.S.Athabasca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Continental Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Lunch Co.",
          "Mercantile lunch Co."
        ],
        "to": "Mercantile Lunch Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial"
        ],
        "to": "Colonial Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Society   Sons Of The American Revolution",
          "Wisconsin Society Sons Of The American Revolution"
        ],
        "to": "Wisconsin Society   Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. Regis",
          "St. Regis Hotel"
        ],
        "to": "Hotel St. Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St.Regis Hotel",
          "Hotel St.Regis"
        ],
        "to": "St.Regis Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Charles Hotel",
          "St Charles Hotel"
        ],
        "to": "St. Charles Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Velvet",
          "Velvet Hotel"
        ],
        "to": "Hotel Velvet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of The Revolution In The State Of Missouri",
          "Society Sons Of The Revolution In The State Of Missouri"
        ],
        "to": "Society Of Sons Of The Revolution In The State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf  Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire Hotel",
          "Hotel Empire"
        ],
        "to": "Empire Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Reuben's",
          "Reuben's."
        ],
        "to": "Reuben's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Royal Palm Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "George Washington Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.",
          "Rg"
        ],
        "to": "R.G."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Columbia Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Oceanic",
          "Rms Oceanic"
        ],
        "to": "R.M.S. Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel DuPont",
          "Hotel duPont"
        ],
        "to": "Hotel DuPont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New Grand Hotel",
          "Grand New Hotel"
        ],
        "to": "New Grand Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hotel Plaza",
          "The Plaza Hotel"
        ],
        "to": "The Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough",
          "Hotel Marlborough "
        ],
        "to": "Hotel Marlborough"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "Xiii Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Place Viger Hotel",
          "Hotel Place Viger"
        ],
        "to": "Place Viger Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of The American Revolution",
          "Empire State Society Sons Of The American Revolution"
        ],
        "to": "Empire State Society Of Sons Of The American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Queen Elizabeth",
          "R.M.S. Queen  Elizabeth"
        ],
        "to": "R.M.S. Queen Elizabeth"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mouquin Restaurant And Wine Co",
          "Mouquin Restaurant And Wine Co."
        ],
        "to": "Mouquin Restaurant And Wine Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial "
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Guffanti's Table d'HÃ´te",
          "Guffanti's Table d'HÃ´te "
        ],
        "to": "Guffanti's Table d'HÃ´te"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Commodore",
          "Commodore Hotel"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Not Given",
          "Not given"
        ],
        "to": "Not Given"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "U.S.M.S. St. Louis"
        ],
        "to": "Usms St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "South Ferry Hotel",
          " South Ferry Hotel"
        ],
        "to": "South Ferry Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyer's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Biltmore",
          "Biltmore Hotel"
        ],
        "to": "Hotel Biltmore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnell's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel D'angleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. Queen Mary",
          "R.M.S. Queen  Mary"
        ],
        "to": "R.M.S. Queen Mary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Claremont Hotel",
          "Hotel Claremont"
        ],
        "to": "Claremont Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-Life Building",
          "MetLife Building"
        ],
        "to": "Met-Life Building"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Eastman",
          "Eastman Hotel"
        ],
        "to": "Hotel Eastman"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, The Plaza",
          "The Plaza   Ballroom"
        ],
        "to": "Ballroom, The Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzie's Hotel",
          "Menzies Hotel"
        ],
        "to": "Menzie's Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Walton's Old Homestead Oyster and Chop House",
          "Walton's Old Homestead Oyster And Chop House"
        ],
        "to": "Walton's Old Homestead Oyster and Chop House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company   Sierra",
          "Oceanic Steamship Company  Sierra"
        ],
        "to": "Oceanic Steamship Company   Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers' Association",
          "Master Printers Association"
        ],
        "to": "Master Printers' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota",
          "Military Order Of The Loyal Legion Of The United States.  Commandery Of The State Of Minnesota"
        ],
        "to": "Military Order Of The Loyal Legion Of The United States Commandery Of The State Of Minnesota"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Castleton Hotel",
          "Hotel Castleton"
        ],
        "to": "Castleton Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams' Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Society In The City Of New York",
          "The New England Society In The City Of New York"
        ],
        "to": "New England Society In The City Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Grenoble Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Penn Rr   Pullman Dining Car Service",
          "Penn. Rr   Pullman Dining Car Service"
        ],
        "to": "Penn Rr   Pullman Dining Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alpha Kappa Kappa",
          "Kappa Alpha"
        ],
        "to": "Alpha Kappa Kappa"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "National Cooper's Association",
          "National Coopers Association"
        ],
        "to": "National Cooper's Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Windsor Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Mouquin Restaurant and Wine Co.",
          "The Mouquin Restaurant And Wine Co."
        ],
        "to": "The Mouquin Restaurant and Wine Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie   Steamer Furst Bismarck",
          "Hamburg Amerika Linie  Steamer Furst Bismarck"
        ],
        "to": "Hamburg Amerika Linie   Steamer Furst Bismarck"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "New York Central System, Boston & Albany Railroad"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Copley Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "Fifth Avenue Hotel "
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central & Hudson River R.R.",
          "New York Central & Hudson River R.R.."
        ],
        "to": "New York Central & Hudson River R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. George's Society",
          "St. Georges Society"
        ],
        "to": "St. George's Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "San Remo Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanley's"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Imperial",
          "Imperial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces' Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha   S.S.Nasuga",
          "Nippon Yusen Kaisha  S.S.Nasuga"
        ],
        "to": "Nippon Yusen Kaisha   S.S.Nasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeteria   Lunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St. George",
          "St. George Hotel"
        ],
        "to": "Hotel St. George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Associated Pioneers Of The Territorial Days Of California",
          "The Associated Pioneers Of The Territorial Days Of California"
        ],
        "to": "Associated Pioneers Of The Territorial Days Of California"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "York Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "National Wholesale  Druggists' Association",
          "National Wholesale Druggists' Association"
        ],
        "to": "National Wholesale  Druggists' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S. Army   Subsistence Dept.",
          "Us Army   Subsistence Dept."
        ],
        "to": "U.S. Army   Subsistence Dept."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "Hotel New Weston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-Plaza Hotel",
          "Hotel Copley-Plaza"
        ],
        "to": "Copley-Plaza Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha   S.S.Kinshin Maru",
          "Nippon Yusen Kaisha  S.S.Kinshin Maru"
        ],
        "to": "Nippon Yusen Kaisha   S.S.Kinshin Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ponce De Leon",
          "Ponce De Leon Hotel"
        ],
        "to": "Hotel Ponce De Leon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Revelstoke Hotel",
          "Hotel Revelstoke"
        ],
        "to": "Revelstoke Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha   S.S. Kasuga",
          "Nippon Yusen Kaisha  Ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha   S.S. Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pacific Mail S.S. Co.",
          "Pacific Mail Ss Co."
        ],
        "to": "Pacific Mail S.S. Co."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Roanoke Hotel",
          "Hotel Roanoke"
        ],
        "to": "Roanoke Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Des Indes Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Westminster",
          "Westminster Hotel"
        ],
        "to": "Hotel Westminster"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome And Profile House",
          "Profile House  And Hotel Vendome"
        ],
        "to": "Hotel Vendome And Profile House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York "
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Gallatin Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporters' Association",
          "New England Shorthand Reporter's Association"
        ],
        "to": "New England Shorthand Reporters' Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutcher Lloyd Bremen",
          "Norddeutcher Lloyd   Bremen"
        ],
        "to": "Norddeutcher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Hotel Astor   The Belvedere Room",
          "The Hotel Astor  The Belvedere Room"
        ],
        "to": "The Hotel Astor   The Belvedere Room"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Essex Hotel   The Colonnades",
          "The Essex Hotel The Colonnades"
        ],
        "to": "The Essex Hotel   The Colonnades"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/^(.+);/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/^(.+);/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/^(.+);/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/^(.+);/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/^(.+);/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/^(.+);/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression grel:value.replace(/^(.+);/,'$1')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "grel:value.replace(/^(.+);/,'$1')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]